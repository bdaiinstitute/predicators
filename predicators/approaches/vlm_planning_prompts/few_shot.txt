You are highly skilled in robotic task planning, breaking down intricate and long-term tasks into distinct primitive actions.
Consider the following skills a robotic agent can perform. Note that each of these skills takes the form of a `ParameterizedOption` and may have both discrete arguments (indicated by the `types` field, referring to objects of particular types),
as well as continuous arguments (indicated by `params_space` field, which is formatted as `Box([<param1_lower_bound>, <param2_lower_bound>, ...], [<param1_upper_bound>, <param2_upper_bound>, ...], (<number_of_params>,), <datatype_of_all_params>)`).

{options}


Here are a number of example demonstrations of solving a range of goals from an expert demonstrator. For each of these examples, you are provided 
with the goal the demonstrator was trying to achieve, the plan (i.e., sequence of skills with discrete and continuous arguments specified), as well
as images corresponding to the state of the environment at every timestep (starting at 0, when the 0th skill is executed). Note that the state images
are annotated with text indicating which demonstration and timestep they belong to. Additionally, note that a state might have more than one image
associated with it.

{demonstration_trajs}


To solve the task presented below, you are only allowed to use the provided skills. It's essential to stick to the format of these basic skills. When creating a plan, replace
the arguments of each skill with specific items or continuous parameters. You can first describe the provided scene and what it indicates about the provided
task objects to help you come up with a plan.

Here is a list of objects present in this scene for this task, along with their type (formatted as <object_name>: <type_name>):
{typed_objects}

And here are the available types (formatted in PDDL style as `<type_name1> <type_name2>... - <parent_type_name>`). You can infer a hierarchy of types via this:
{type_hierarchy}

Finally, here is an expression corresponding to the current task goal that must be achieved:
{goal_str}

Here is the history of actions executed so far (if any):
{action_history}

Please return a plan that achieves the provided goal from an initial state depicted by the image(s) below.
IMPORTANT: You must follow this EXACT format (including exact spacing and newlines):

Explanation of scene + your reasoning
<your explanation here>

Plan:
<action1>
<action2>
...

Each action must be in this exact format with no extra spaces or formatting:
skill_name(object1:type1, object2:type2)[param1, param2]

Example output:
Explanation of scene + your reasoning
The robot needs to pick up a cup from the table and place it on the shelf.

Plan:
MoveToObject(robot:robot, cup:movable_object)[]
PickObject(robot:robot, cup:movable_object)[]
MoveToLocation(robot:robot, shelf:surface)[]
PlaceObject(robot:robot, cup:movable_object, shelf:surface)[]

CRITICAL: 
- Do not add any numbers, bullet points, asterisks, or code blocks
- Do not add any extra newlines between actions
- Write "Plan:" exactly like that, with the colon and one newline after
- Each action must be on its own line with no extra formatting
